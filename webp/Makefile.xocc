
# cxx compiler
CXX := $(CXX)

# OpenCL compiler
XOCC := $(VP8_SDX)/bin/xocc 

# xbinst
XBINST := $(VP8_SDX)/bin/xbinst
XBINST_DIR := xbinst

# arch
ARCH:=X86

# device
NUMPLATFORM = 1
PLATFORM := $(DSA)
DEVICE := $(DSA_DEVICE)
EMCONFIG_FILE := emconfig.json

# By default build for hardware can be set to
#   hw_emu for hardware emulation
#   sw_emu for software emulation
#   or a collection of all or none of these
TARGETS := $(VP8_TARGET)

EXES = cwebp
XCLBINS = krnl_enctokenloop

# C++ Compiler Flags and xocc compiler flags
CXXFLAGS := -I $(VP8_SDX)/Vivado_HLS/include \
            -DVP8_NBINSTANCES=$(VP8_NBINSTANCES) -g \
            -DVP8_DSA=\"$(DSA_DEVICE)\"

XOCCFLAGS := --xp "param:compiler.preserveHlsOutput=1" \
             --xp "param:compiler.generateExtraRunData=true" -s \
             --xp prop:solution.device_repo_paths=$(VP8_DEVICE_REPO_PATH) \
             --xp prop:solution.platform_repo_paths=$(VP8_DEVICE_REPO_PATH)

ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 1), 1)
XOCCFLAGS := $(XOCCFLAGS) \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_1_1.M_AXI_GMEM0.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_1_1.M_AXI_GMEM1.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_1_1.M_AXI_GMEM2.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_1_1.M_AXI_GMEM3.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_1_1.M_AXI_GMEM4.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_1_1.M_AXI_GMEM5.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_1_1.M_AXI_GMEM0.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_1_1.M_AXI_GMEM1.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_1_1.M_AXI_GMEM2.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_1_1.M_AXI_GMEM3.core.OCL_REGION_0.M03_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_1_1.M_AXI_GMEM4.core.OCL_REGION_0.M03_AXI 
endif

ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 2), 1)
XOCCFLAGS := $(XOCCFLAGS) \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_2_1.M_AXI_GMEM0.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_2_1.M_AXI_GMEM1.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_2_1.M_AXI_GMEM2.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_2_1.M_AXI_GMEM3.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_2_1.M_AXI_GMEM4.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_2_1.M_AXI_GMEM5.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_2_1.M_AXI_GMEM0.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_2_1.M_AXI_GMEM1.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_2_1.M_AXI_GMEM2.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_2_1.M_AXI_GMEM3.core.OCL_REGION_0.M02_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_2_1.M_AXI_GMEM4.core.OCL_REGION_0.M02_AXI 
endif

ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 3), 1)
XOCCFLAGS := $(XOCCFLAGS) \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_3_1.M_AXI_GMEM0.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_3_1.M_AXI_GMEM1.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_3_1.M_AXI_GMEM2.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_3_1.M_AXI_GMEM3.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_3_1.M_AXI_GMEM4.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_3_1.M_AXI_GMEM5.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_3_1.M_AXI_GMEM0.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_3_1.M_AXI_GMEM1.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_3_1.M_AXI_GMEM2.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_3_1.M_AXI_GMEM3.core.OCL_REGION_0.M00_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_3_1.M_AXI_GMEM4.core.OCL_REGION_0.M00_AXI 
endif

ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 4), 1)
XOCCFLAGS := $(XOCCFLAGS) \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_4_1.M_AXI_GMEM0.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_4_1.M_AXI_GMEM1.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_4_1.M_AXI_GMEM2.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_4_1.M_AXI_GMEM3.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_4_1.M_AXI_GMEM4.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_IntraPredLoop2_NoOut_4_1.M_AXI_GMEM5.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_4_1.M_AXI_GMEM0.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_4_1.M_AXI_GMEM1.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_4_1.M_AXI_GMEM2.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_4_1.M_AXI_GMEM3.core.OCL_REGION_0.M01_AXI \
             --xp misc:map_connect=add.kernel.kernel_2_ArithmeticCoding_4_1.M_AXI_GMEM4.core.OCL_REGION_0.M01_AXI 
endif


opencl_CXXFLAGS := -I $(VP8_SDX)/runtime/include/1_2 \
                   -I $(VP8_SDX)/Vivado_HLS/include

opencl_LDFLAGS := -L $(VP8_SDX)/runtime/lib/x86_64 \
                  -L $(VP8_SDX)/lib/lnx64.o -lxilinxopencl -pthread

cwebp_CXXFLAGS := -I./src/ \
                  $(opencl_CXXFLAGS) \
                  -Wall -fpermissive \
                  -DHAVE_MALLOC_H \
                  -DHAVE_PTHREAD  \
                  -DWEBP_HAVE_PNG \
                  -DWEBP_HAVE_TIFF \
                  -DWEBP_USE_THREAD \
                  -DWEBP_HAVE_GIF \
                  -DFPGA_DEVICE 

cwebp_LDFLAGS := $(opencl_LDFLAGS) -lpng


###################

# Host Application
cwebp_SRCS= src/dec/alpha.c \
            src/dec/buffer.c \
            src/dec/frame.c \
            src/dec/idec.c \
            src/dec/io.c \
            src/dec/quant.c \
            src/dec/tree.c \
            src/dec/vp8.c \
            src/dec/vp8l.c \
            src/dec/webp.c \
            src/demux/anim_decode.c \
            src/demux/demux.c \
            src/dsp/alpha_processing.c \
            src/dsp/alpha_processing_mips_dsp_r2.c\
            src/dsp/alpha_processing_sse2.c \
            src/dsp/alpha_processing_sse41.c \
            src/dsp/cpu.c \
            src/dsp/dec.c \
            src/dsp/dec_clip_tables.c \
            src/dsp/dec_mips32.c \
            src/dsp/dec_mips_dsp_r2.c \
            src/dsp/dec_neon.c \
            src/dsp/dec_sse2.c \
            src/dsp/dec_sse41.c \
            src/dsp/filters.c \
            src/dsp/filters_mips_dsp_r2.c \
            src/dsp/filters_sse2.c\
            src/dsp/lossless.c \
            src/dsp/lossless_mips_dsp_r2.c \
            src/dsp/lossless_neon.c \
            src/dsp/lossless_sse2.c \
            src/dsp/rescaler.c \
            src/dsp/rescaler_mips32.c \
            src/dsp/rescaler_mips_dsp_r2.c \
            src/dsp/rescaler_neon.c \
            src/dsp/rescaler_sse2.c \
            src/dsp/upsampling.c \
            src/dsp/upsampling_mips_dsp_r2.c \
            src/dsp/upsampling_neon.c \
            src/dsp/upsampling_sse2.c \
            src/dsp/yuv.c \
            src/dsp/yuv_mips32.c \
            src/dsp/argb.c \
            src/dsp/argb_mips_dsp_r2.c \
            src/dsp/argb_sse2.c \
            src/dsp/yuv_mips_dsp_r2.c \
            src/dsp/yuv_sse2.c \
            src/dsp/cost.c \
            src/dsp/cost_mips32.c \
            src/dsp/cost_mips_dsp_r2.c \
            src/dsp/cost_sse2.c \
            src/dsp/enc.c \
            src/dsp/enc_avx2.c \
            src/dsp/enc_mips32.c \
            src/dsp/enc_mips_dsp_r2.c \
            src/dsp/enc_neon.c \
            src/dsp/enc_sse2.c \
            src/dsp/enc_sse41.c \
            src/dsp/lossless_enc.c \
            src/dsp/lossless_enc_mips32.c \
            src/dsp/lossless_enc_mips_dsp_r2.c \
            src/dsp/lossless_enc_neon.c \
            src/dsp/lossless_enc_sse2.c \
            src/dsp/lossless_enc_sse41.c \
            src/enc/alpha.c \
            src/enc/analysis.c \
            src/enc/backward_references.c \
            src/enc/config.c \
            src/enc/cost.c \
            src/enc/delta_palettization.c \
            src/enc/filter.c \
            src/enc/frame.c \
            src/enc/histogram.c \
            src/enc/iterator.c \
            src/enc/near_lossless.c \
            src/enc/picture.c \
            src/enc/picture_csp.c \
            src/enc/picture_psnr.c \
            src/enc/picture_rescale.c \
            src/enc/picture_tools.c \
            src/enc/quant.c \
            src/enc/syntax.c \
            src/enc/token.c\
            src/enc/tree.c \
            src/enc/vp8l.c \
            src/enc/webpenc.c \
            examples/jpegdec.c \
            examples/metadata.c \
            examples/pngdec.c \
            examples/webpdec.c \
            examples/example_util.c \
            src/mux/anim_encode.c \
            src/mux/muxedit.c \
            src/mux/muxinternal.c \
            src/mux/muxread.c \
            src/utils/bit_reader.c \
            src/utils/color_cache.c \
            src/utils/filters.c \
            src/utils/huffman.c \
            src/utils/quant_levels_dec.c \
            src/utils/random.c \
            src/utils/rescaler.c \
            src/utils/thread.c \
            src/utils/utils.c \
            src/utils/bit_writer.c \
            src/utils/huffman_encode.c \
            src/utils/quant_levels.c \
            examples/cwebp.c \
            examples/wicdec.c \
            examples/create_kernel.c \
            src/enc/kernel/oclHelper.cpp \
            src/enc/kernel/oclErrorCodes.cpp \
            src/utils/profiling.c \
            src_syn/vp8_hls_syn.cpp

cwebp_HDRS=examples/anim_util.h \
           examples/example_util.h \
           examples/jpegdec.h \
           examples/metadata.h \
           examples/pngdec.h \
           examples/stopwatch.h \
           examples/webpdec.h \
           examples/wicdec.h \
           examples/create_kernel.h \
           src/webp/decode.h \
           src/webp/demux.h \
           src/webp/encode.h \
           src/webp/extras.h \
           src/webp/mux.h \
           src/webp/mux_types.h \
           src/webp/types.h \
           src/dec/alphai.h \
           src/dec/common.h \
           src/dec/decode_vp8.h \
           src/dec/vp8i.h \
           src/dec/vp8li.h \
           src/dec/webpi.h \
           src/dsp/dsp.h \
           src/dsp/lossless.h \
           src/dsp/mips_macro.h \
           src/dsp/neon.h \
           src/dsp/yuv.h \
           src/enc/backward_references.h \
           src/enc/cost.h \
           src/enc/delta_palettization.h \
           src/enc/histogram.h \
           src/enc/vp8enci.h \
           src/enc/vp8li.h \
           src/mux/muxi.h \
           src/utils/bit_reader.h \
           src/utils/bit_reader_inl.h \
           src/utils/bit_writer.h \
           src/utils/color_cache.h \
           src/utils/endian_inl.h \
           src/utils/filters.h \
           src/utils/huffman.h \
           src/utils/huffman_encode.h \
           src/utils/quant_levels.h \
           src/utils/quant_levels_dec.h \
           src/utils/random.h \
           src/utils/rescaler.h \
           src/utils/thread.h \
           src/utils/utils.h \
           src/webp/format_constants.h\
           src_syn/vp8_hls_syn.h \
           src_syn/vp8_hls_syn2.h

# krnl_enctokenloop_SRCS=./src/enc/kernel/kernel_enctokenloop.c
# kernel_name=enctokenloop

krnl_enctokenloop_SRCS = ./src_syn/vp8_hls_syn.cpp

predkernel_name   = kernel_IntraPredLoop2_NoOut
predkernel_name_1 = kernel_IntraPredLoop2_NoOut_1
predkernel_name_2 = kernel_IntraPredLoop2_NoOut_2
predkernel_name_3 = kernel_IntraPredLoop2_NoOut_3
predkernel_name_4 = kernel_IntraPredLoop2_NoOut_4

ackernel_name   = kernel_2_ArithmeticCoding
ackernel_name_1 = kernel_2_ArithmeticCoding_1
ackernel_name_2 = kernel_2_ArithmeticCoding_2
ackernel_name_3 = kernel_2_ArithmeticCoding_3
ackernel_name_4 = kernel_2_ArithmeticCoding_4


###################

# rules.mk - defines basic rules for building executables and xclbins

# Defines the prefix for each kernel.
XCLBIN_DIR=xclbin

# mk_exe - build an exe from host code
#   CXX - compiler to use
#   CXXFLAGS - base compiler flags to use
#   LDFLAGS - base linker flags to use
#   $(1) - name of exe
#   $(1)_SRCS - the source files to compile
#   $(1)_HDRS - the header files used by sources
#   $(1)_CXXFLAGS - extra flags specific to this exe
#   $(1)_LDFLAGS - extra linkder flags
define mk_exe

$(1): $($(1)_SRCS) $($(1)_HDRS)
	$(CXX) $(CXXFLAGS) -w $($(1)_CXXFLAGS)  -o $$@ $($(1)_SRCS) $($(1)_LDFLAGS) $(LDFLAGS) 

EXE_GOALS+= $(1)

endef

# host target
$(foreach exe,$(EXES),$(eval $(call mk_exe,$(exe))))

# kernel
XCLBIN_GOALS := kernel.xclbin

predkernel_1.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(predkernel_name_1) --kernel_frequency $(VP8_FREQUENCY) $^

predkernel_2.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(predkernel_name_2) --kernel_frequency $(VP8_FREQUENCY) $^

predkernel_3.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(predkernel_name_3) --kernel_frequency $(VP8_FREQUENCY) $^

predkernel_4.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(predkernel_name_4) --kernel_frequency $(VP8_FREQUENCY) $^

ackernel_1.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(ackernel_name_1) --kernel_frequency $(VP8_FREQUENCY) $^

ackernel_2.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(ackernel_name_2) --kernel_frequency $(VP8_FREQUENCY) $^

ackernel_3.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(ackernel_name_3) --kernel_frequency $(VP8_FREQUENCY) $^

ackernel_4.xo: $(krnl_enctokenloop_SRCS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --compile -o $@ \
		-t $(TARGETS) -k $(ackernel_name_4) --kernel_frequency $(VP8_FREQUENCY) $^

XOOBJS := 
ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 1), 1)
    XOOBJS := $(XOOBJS) predkernel_1.xo ackernel_1.xo
endif
ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 2), 1)
    XOOBJS := $(XOOBJS) predkernel_2.xo ackernel_2.xo
endif
ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 3), 1)
    XOOBJS := $(XOOBJS) predkernel_3.xo ackernel_3.xo
endif
ifeq ($(shell expr $(VP8_NBINSTANCES) \>= 4), 1)
    XOOBJS := $(XOOBJS) predkernel_4.xo ackernel_4.xo
endif

$(XCLBIN_GOALS): $(XOOBJS)
	$(XOCC) $(XOCCFLAGS) --platform $(PLATFORM) --link -o $@ \
		-t $(TARGETS) $^ --kernel_frequency $(VP8_FREQUENCY)

compile: $(EXE_GOALS) $(XCLBIN_GOALS) json
		@echo ' '	 
		@echo 'Compiling host exe and kernel.xclbin...'
        $(info $(EXE_GOALS_GOALS))		
        $(info $(XCLBIN_GOALS))	

clean:
	rm -rf $(EXE_GOALS) $(XCLBIN_GOALS) $(XBINST_DIR)/* $(XCLBIN_DIR)/* sdaccel_* *.ll _xocc_* *.xo

json:
	@echo '${\n} Generating emconfig.json ...'
	$(VP8_SDX)/bin/emconfigutil --xp prop:solution.device_repo_paths=$(VP8_DEVICE_REPO_PATH) --xdevice $(DEVICE) --nd 1 

package:
	@echo '${\n} Running xbinst...'
	$(XBINST) --platform $(PLATFORM) --platform_repo_paths $(VP8_DEVICE_REPO_PATH) -d .

copy_host_xclbin:
	@echo '${\n} Copying host exe and xclbin to package'
	cp -prf kernel.xclbin $(XBINST_DIR)
	cp -prf $(EXE_GOALS) $(XBINST_DIR)
	cp -prf pic4test $(XBINST_DIR)
	cp -prf extlib $(XBINST_DIR)

# helper targets

run: json
	@echo '${\n} Running...'
	export XCL_EMULATION_MODE="true"; \
	export GEN_TEST_PLATFORM=$(DSA); \
	$(EXE_GOALS) list.txt -use_ocl -q 80 -o output

timeline:
	sda2wdb sdaccel_timeline_trace.csv

profile: 
	sda2protobuf sdaccel_profile_summary.csv
